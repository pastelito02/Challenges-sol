//Author andresctirado
const maps = {
  '00000': 'A', '00001': 'B', '00010': 'C', '00011': 'D',
  '00100': 'E', '00101': 'F', '00110': 'G', '00111': 'H',
  '01000': 'I', '01001': 'J', '01010': 'K', '01011': 'L',
  '01100': 'M', '01101': 'N', '01110': 'O', '01111': 'P',
  '10000': 'Q', '10001': 'R', '10010': 'S', '10011': 'T',
  '10100': 'U', '10101': 'V', '10110': 'W', '10111': 'X',
  '11000': 'Y', '11001': 'Z', '11010': '2', '11011': '3',
  '11100': '4', '11101': '5', '11110': '6', '11111': '7',
};

const demaps = {
  'A': '00000', 'B': '00001', 'C': '00010', 'D': '00011',
  'E': '00100', 'F': '00101', 'G': '00110', 'H': '00111',
  'I': '01000', 'J': '01001', 'K': '01010', 'L': '01011',
  'M': '01100', 'N': '01101', 'O': '01110', 'P': '01111',
  'Q': '10000', 'R': '10001', 'S': '10010', 'T': '10011',
  'U': '10100', 'V': '10101', 'W': '10110', 'X': '10111',
  'Y': '11000', 'Z': '11001', '2': '11010', '3': '11011',
  '4': '11100', '5': '11101', '6': '11110', '7': '11111',
};

const mapsASCII = {
  '00100000': ' ', '00100001': '!', '00100010': '\'', '00100011': '#',
  '00100100': '$', '00100101': '%', '00100110': '&', '00100111': '\'',
  '00101000': '(', '00101001': ')', '00101010': '*', '00101011': '+',
  '00101100': ',', '00101101': '-', '00101110': '.', '00101111': '/',
  '00110000': '0', '00110001': '1', '00110010': '2', '00110011': '3',
  '00110100': '4', '00110101': '5', '00110110': '6', '00110111': '7',
  '00111000': '8', '00111001': '9', '00111010': ':', '00111011': ';',
  '00111100': '<', '00111101': '=', '00111110': '>', '00111111': '?',
  '01000000': '@', '01000001': 'A', '01000010': 'B', '01000011': 'C',
  '01000100': 'D', '01000101': 'E', '01000110': 'F', '01000111': 'G',
  '01001000': 'H', '01001001': 'I', '01001010': 'J', '01001011': 'K',
  '01001100': 'L', '01001101': 'M', '01001110': 'N', '01001111': 'O',
  '01010000': 'P', '01010001': 'Q', '01010010': 'R', '01010011': 'S',
  '01010100': 'T', '01010101': 'U', '01010110': 'V', '01010111': 'W',
  '01011000': 'X', '01011001': 'Y', '01011010': 'Z', '01011011': '[',
  '01011100': '\\', '01011101': ']', '01011110': '^', '01011111': '_',
  '01100000': '\'', '01100001': 'a', '01100010': 'b', '01100011': 'c',
  '01100100': 'd', '01100101': 'e', '01100110': 'f', '01100111': 'g',
  '01101000': 'h', '01101001': 'i', '01101010': 'j', '01101011': 'k',
  '01101100': 'l', '01101101': 'm', '01101110': 'n', '01101111': 'o',
  '01110000': 'p', '01110001': 'q', '01110010': 'r', '01110011': 's',
  '01110100': 't', '01110101': 'u', '01110110': 'v', '01110111': 'w',
  '01111000': 'x', '01111001': 'y', '01111010': 'z', '01111011': '{',
  '01111100': '|', '01111101': '}', '01111110': '~',
};

function code(word) {
  const five = 5;
  const padded = five - (word.length % five);
  for (let i = 0; i < padded; i += 1) {
    word += padded.toString();
  }
  let ascii = '';
  for (let i = 0; i < word.length; i += 1) {
    const six = 6;
    if (word[i].charCodeAt().toString(2).length === six) {
      ascii += `00${ word[i].charCodeAt().toString(2) }`;
    } else {
      ascii += `0${ word[i].charCodeAt().toString(2) }`;
    }
  }
  let codeR = '';
  for (let i = 0; i < ascii.length; i += five) {
    let chunk = '';
    for (let jnn = 0; jnn < five; jnn += 1) {
      chunk += ascii[i + jnn];
    }
    codeR += maps[chunk];
  }
  return codeR;
}

function decode(codeR) {
  let ascii = '';
  for (let i = 0; i < codeR.length; i += 1) {
    ascii += demaps[codeR[i]];
  }
  let word = '';
  const eigth = 8;
  for (let i = 0; i < ascii.length; i += eigth) {
    let chunk = '';
    for (let jnn = 0; jnn < eigth; jnn += 1) {
      chunk += ascii[i + jnn];
    }
    word += mapsASCII[chunk];
  }
  const padded = parseInt(word[word.length - 1], 10);
  if (!isNaN(padded)) {
    for (let i = 0; i < padded; i += 1) {
      word = word.slice(0, word.length - 1);
    }
  }
  return word;
}

function enco(miss, file) {
  const lines = file.split(/\r\n|\r|\n/g);
  let answer = '';
  for (let i = 0; i < lines.length - 1; i += 1) {
    if (i % 2 === 0) {
      answer += `${ code(lines[i + 1]) } `;
    } else {
      answer += `${ decode(lines[i + 1]) } `;
    }
  }
  process.stdout.write(answer);
}

const fileS = require('fs');

function fileLoad() {
  return fileS.readFile('DATA.lst', 'utf8', (miss, file) => enco(miss, file));
}

fileLoad();
